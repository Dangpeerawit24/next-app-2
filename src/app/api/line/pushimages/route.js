import { PrismaClient } from "@prisma/client";
import path from "path";
import fs from "fs";

const prisma = new PrismaClient();

export const config = {
  api: {
    bodyParser: false,
  },
};

export async function POST(req) {
  try {
    const formData = await req.formData();

    const UPLOAD_DIR = path.join(process.cwd(), "uploads/img/pushimages");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    if (!fs.existsSync(UPLOAD_DIR)) {
      fs.mkdirSync(UPLOAD_DIR, { recursive: true });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    const id = Number(formData.get("id"));
    const userid = formData.get("userid");
    const campaignsname = formData.get("campaignsname");
    const pushmessage = 1;

    // ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå)
    let files = formData.getAll("url_img[]");
    if (!files || files.length === 0) {
      return new Response(
        JSON.stringify({ success: false, message: "Missing file" }),
        { status: 400 }
      );
    }

    const allowedExtensions = [".jpg", ".jpeg", ".png"];
    const imageUrls = [];
    const newFileNames = [];

    // Loop ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
    for (const file of files) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
      const fileExt = path.extname(file.name);
      if (!allowedExtensions.includes(fileExt.toLowerCase())) {
        return new Response(
          JSON.stringify({ success: false, message: "Invalid file type" }),
          { status: 400 }
        );
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
      const randomInt = Math.floor(Math.random() * 9000) + 1000;
      const newFileName = `${Date.now()}${randomInt}${fileExt}`;
      const newFilePath = path.join(UPLOAD_DIR, newFileName);
      // ‡πÄ‡∏Å‡πá‡∏ö path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB (‡πÉ‡∏ä‡πâ public path)
      const fileNameForDb = `/api/uploads/img/pushimages/${newFileName}`;

      // ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô buffer ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏î‡∏¥‡∏™‡∏Å‡πå
      const fileBuffer = Buffer.from(await file.arrayBuffer());
      await fs.promises.writeFile(newFilePath, fileBuffer);

      imageUrls.push(fileNameForDb);
      newFileNames.push(newFileName);
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏ô‡∏ß‡∏Å‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    const existingRecord = await prisma.campaign_transactions.findUnique({
      where: { id: id },
      select: { url_img: true },
    });

    let updatedFileNamesString = newFileNames.join(",");
    if (existingRecord && existingRecord.url_img) {
      updatedFileNamesString = existingRecord.url_img + "," + updatedFileNamesString;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (update row ‡∏ó‡∏µ‡πà‡∏°‡∏µ id ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö transactionID)
    const updatedTransaction = await prisma.campaign_transactions.update({
      data: {
        status: "‡∏™‡πà‡∏á‡∏†‡∏≤‡∏û‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç‡πÅ‡∏•‡πâ‡∏ß",
        url_img: updatedFileNamesString,
      },
      where: {
        id: id,
      },
    });

    // ‡∏™‡πà‡∏á push message ‡∏ú‡πà‡∏≤‡∏ô LINE API ‡∏´‡∏≤‡∏Å pushmessage > 0
    if (pushmessage && Number(pushmessage) > 0) {
      const lineAccessToken = process.env.NEXT_PUBLIC_LINE_CHANNEL_ACCESS_TOKEN;
      // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡∏•‡∏∞‡∏†‡∏≤‡∏û
      for (const imageUrl of imageUrls) {
        await fetch("https://api.line.me/v2/bot/message/push", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${lineAccessToken}`,
          },
          body: JSON.stringify({
            to: userid,
            messages: [
              {
                type: "image",
                // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö URL ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ NEXT_PUBLIC_BASE_URL
                originalContentUrl: process.env.NEXT_PUBLIC_BASE_URL + imageUrl,
                previewImageUrl: process.env.NEXT_PUBLIC_BASE_URL + imageUrl,
              },
            ],
          }),
        });
      }

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const textMessage = `‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏≠‡∏á‡∏ö‡∏∏‡∏ç\n${campaignsname}\n‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡πÇ‡∏°‡∏ó‡∏ô‡∏≤‡∏Ñ‡∏£‡∏±‡∏öüôè`;
      await fetch("https://api.line.me/v2/bot/message/push", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${lineAccessToken}`,
        },
        body: JSON.stringify({
          to: userid,
          messages: [
            {
              type: "text",
              text: textMessage,
            },
          ],
        }),
      });
    }

    return new Response(
      JSON.stringify({ success: true, data: updatedTransaction }),
      { status: 201 }
    );
  } catch (error) {
    console.error("Error submitting form:", error);
    return new Response(
      JSON.stringify({ success: false, message: "Internal Server Error" }),
      { status: 500 }
    );
  }
}
